<?xml version="1.0" encoding="utf-8"?>
<!--
Feathers SDK Manager
Copyright 2015 Bowler Hat LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->
<f:Screen xmlns:fx="http://ns.adobe.com/mxml/2009"
	xmlns:f="library://ns.feathersui.com/mxml">
	
	<fx:Metadata>
		[Event(name="complete", type="starling.events.Event")]
		[Event(name="cancel", type="starling.events.Event")]
	</fx:Metadata>
	
	<f:layout>
		<f:AnchorLayout/>
	</f:layout>
	
	<f:LayoutGroup>
		<f:layout>
			<f:HorizontalLayout gap="10" padding="10" verticalAlign="middle"/>
		</f:layout>
		<f:layoutData>
			<f:AnchorLayoutData top="0" right="0" bottom="0" left="0"
				bottomAnchorDisplayObject="{footer}"/>
		</f:layoutData>
		
		<f:ImageLoader styleName="{CustomStyleNames.ALTERNATE_STYLE_NAME_DIRECTORY_ICON_IMAGE_LOADER}"/>
		
		<f:LayoutGroup>
			<f:layout>
				<f:VerticalLayout gap="10" horizontalAlign="left" verticalAlign="middle"/>
			</f:layout>
			<f:layoutData>
				<f:HorizontalLayoutData percentWidth="100"/>
			</f:layoutData>
			<f:Label styleName="{Label.ALTERNATE_STYLE_NAME_HEADING}"
				wordWrap="true"
				text="Step 3: Choose an empty directory where the Feathers SDK may be installed.">
				<f:layoutData>
					<f:VerticalLayoutData percentWidth="100"/>
				</f:layoutData>
			</f:Label>
			<f:TextInput id="installDirectoryPathInput" isEditable="false"
				text="{installDirectory.nativePath}"
				focusIn="installDirectoryPathInput_focusInHandler(event)">
				<f:layoutData>
					<f:VerticalLayoutData percentWidth="100"/>
				</f:layoutData>
			</f:TextInput>
			<f:Button label="Choose Directory" triggered="chooseInstallDirectoryButton_triggeredHandler(event)"/>
		</f:LayoutGroup>
	</f:LayoutGroup>
	
	<f:Header id="footer">
		<f:layoutData>
			<f:AnchorLayoutData right="0" bottom="0" left="0"/>
		</f:layoutData>
		<f:leftItems>
			<fx:Vector type="starling.display.DisplayObject">
				<f:Button id="backButton" styleName="{Button.ALTERNATE_STYLE_NAME_BACK_BUTTON}"
					label="Back" triggered="backButton_triggeredHandler(event)"/>
			</fx:Vector>
		</f:leftItems>
		<f:rightItems>
			<fx:Vector type="starling.display.DisplayObject">
				<f:Button id="forwardButton" styleName="{Button.ALTERNATE_STYLE_NAME_FORWARD_BUTTON}"
					isEnabled="false" label="Next" triggered="forwardButton_triggeredHandler(event)"/>
			</fx:Vector>
		</f:rightItems>
	</f:Header>
	
	<fx:Script><![CDATA[
		import flash.events.Event;
		
		import feathers.controls.Alert;
		import feathers.controls.Button;
		import feathers.controls.Label;
		import feathers.data.ListCollection;
		
		import starling.events.Event;
		
		import utils.CustomStyleNames;
		
		/**
		 * These files may be ignored if they exist when checking if the install
		 * directory is empty.
		 */
		private static const ALLOWED_FILE_NAMES:Vector.<String> = new <String>
		[
			//mac saves settings for how to display a directory in this file
			".DS_Store",
			//windows saves settings for how to display a directory in this file
			"desktop.ini",
			//some versions of windows saves image thumbnails in this file
			"Thumbs.db",
			//may be provided to customize SDK install settings
			"local.properties"
		];
			

		private var _tempInstallDirectory:File;

		private var _installDirectory:File;

		[Bindable("installDirectoryChange")]
		public function get installDirectory():File
		{
			return this._installDirectory;
		}

		public function set installDirectory(value:File):void
		{
			if(value)
			{
				this.forwardButton.isEnabled = true;
			}
			else
			{
				this.forwardButton.isEnabled = false;
			}
			this._installDirectory = value;
			this.dispatchEventWith("installDirectoryChange");
		}

		protected function checkDirWritable(file:File):void
		{
			var bytes:ByteArray = new ByteArray();
			bytes.writeUTFBytes("1");
			var fs:FileStream = new FileStream();
			fs.open(file, FileMode.WRITE);
			fs.writeBytes(bytes);
			fs.close();
			file.deleteFile();
			bytes.clear();
		}

		private function isDirectoryEmpty(dir:File):Boolean
		{
			var result:Boolean;

			var filesArray:Array = dir.getDirectoryListing();
			for each(var file:File in filesArray)
			{
				if(ALLOWED_FILE_NAMES.indexOf(file.name) < 0)
				{
					return false;
				}
			}
			return true;
		}

		private function browseForInstallDirectory():void
		{
			this._tempInstallDirectory = new File();
			this._tempInstallDirectory.addEventListener(flash.events.Event.SELECT, installDirectory_selectHandler);
			this._tempInstallDirectory.addEventListener(flash.events.Event.CANCEL, installDirectory_cancelHandler);
			this._tempInstallDirectory.browseForDirectory("Choose an empty directory where the Feathers SDK may be installed");
		}

		private function chooseInstallDirectoryButton_triggeredHandler(event:starling.events.Event):void
		{
			this.browseForInstallDirectory();
		}

		private function backButton_triggeredHandler(event:starling.events.Event):void
		{
			this.dispatchEventWith(starling.events.Event.CANCEL);
		}

		private function forwardButton_triggeredHandler(event:starling.events.Event):void
		{
			this.dispatchEventWith(starling.events.Event.COMPLETE);
		}

		private function installDirectory_selectHandler(event:flash.events.Event):void
		{
			// Quick check to see if the selected directory is writable
			try
			{
				var f:File = new File(this._tempInstallDirectory.nativePath + File.separator + "feathers.txt");
				checkDirWritable(f);
			}
			catch(e:Error)
			{
				Alert.show("The selected directory requires Administrator rights to write files.", "Invalid Directory", new ListCollection(
						[
							{label: "OK"}
						]));
				this._tempInstallDirectory.removeEventListener(flash.events.Event.SELECT, installDirectory_selectHandler);
				this._tempInstallDirectory.removeEventListener(flash.events.Event.CANCEL, installDirectory_cancelHandler);
				this._tempInstallDirectory = null;
				return;
			}
			if(isDirectoryEmpty(this._tempInstallDirectory))
			{
				this.installDirectory = this._tempInstallDirectory;
			}
			else
			{
				Alert.show("The selected directory is not empty. Please select an empty directory.", "Invalid Directory", new ListCollection(
						[
							{label: "OK"}
						]));
			}
			this._tempInstallDirectory.removeEventListener(flash.events.Event.SELECT, installDirectory_selectHandler);
			this._tempInstallDirectory.removeEventListener(flash.events.Event.CANCEL, installDirectory_cancelHandler);
			this._tempInstallDirectory = null;
		}

		private function installDirectory_cancelHandler(event:flash.events.Event):void
		{
			this._tempInstallDirectory.removeEventListener(flash.events.Event.SELECT, installDirectory_selectHandler);
			this._tempInstallDirectory.removeEventListener(flash.events.Event.CANCEL, installDirectory_cancelHandler);
			this._tempInstallDirectory = null;

			if(this.installDirectoryPathInput.hasFocus)
			{
				this.installDirectoryPathInput.clearFocus();
			}
		}

		protected function installDirectoryPathInput_focusInHandler(event:starling.events.Event):void
		{
			//if it's empty, let's browse.
			//but if there's text, we should allow it to be selected.
			if(this.installDirectoryPathInput.text.length === 0)
			{
				this.browseForInstallDirectory();
			}
		}
		]]></fx:Script>
</f:Screen>
